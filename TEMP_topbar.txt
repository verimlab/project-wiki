// src/components/TopBar.tsx

// [–ò–°–ü–†–ê–í–õ–ï–ù–û] ‚ùóÔ∏è –î–æ–±–∞–≤–ª—è–µ–º `useState` –∏ `useEffect`
import React, { type FormEvent, useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
// [–ò–°–ü–†–ê–í–õ–ï–ù–û] ‚ùóÔ∏è –î–æ–±–∞–≤–ª—è–µ–º `User`, `onAuthStateChanged`
import type { User } from 'firebase/auth';
import { signInWithPopup, signOut, onAuthStateChanged } from 'firebase/auth';
import { auth, googleProvider } from '../firebase';
import { useSearch } from './SearchContext'; 
// [–î–û–ë–ê–í–õ–ï–ù–û] ‚ùóÔ∏è –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º `useRole`, –∫–æ—Ç–æ—Ä—ã–π —É —Ç–µ–±—è *—Ç–æ—á–Ω–æ* –µ—Å—Ç—å
import { useRole } from '../hooks/useRole'; // ‚ö†Ô∏è –ü–†–û–í–ï–†–¨ –≠–¢–û–¢ –ü–£–¢–¨

// [–ò–°–ü–†–ê–í–õ–ï–ù–û] ‚ùóÔ∏è –£–±–∏—Ä–∞–µ–º `user` –∏ `role` –∏–∑ props
type TopBarProps = {
  // Props –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã
};

const TopBar: React.FC<TopBarProps> = () => { // ‚ùóÔ∏è Props —É–±—Ä–∞–Ω—ã
  const { searchQuery, setSearchQuery } = useSearch();
  const [authLoading, setAuthLoading] = useState(false);

  // [–î–û–ë–ê–í–õ–ï–ù–û] ‚ùóÔ∏è –¢–µ–ø–µ—Ä—å TopBar —Å–∞–º —Å–ª–µ–¥–∏—Ç –∑–∞ `user` –∏ `role`
  const [user, setUser] = useState<User | null>(auth.currentUser);
  const { role } = useRole(); // ‚ùóÔ∏è `useRole` —Å–∞–º –Ω–∞–π–¥–µ—Ç —Ä–æ–ª—å

  // [–î–û–ë–ê–í–õ–ï–ù–û] ‚ùóÔ∏è –°–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è Firebase Auth
  useEffect(() => {
    // onAuthStateChanged –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é "–æ—Ç–ø–∏—Å–∫–∏"
    const unsubscribe = onAuthStateChanged(auth, (currentUser) => {
      setUser(currentUser);
    });
    
    // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è, –∫–æ–≥–¥–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä—É–µ—Ç—Å—è
    return () => unsubscribe();
  }, []); // üëà –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ = "run once"


  const handleSearchSubmit = (e: FormEvent) => {
    e.preventDefault();
  };

  const handleGoogleSignIn = async () => {
    setAuthLoading(true);
    try {
      await signInWithPopup(auth, googleProvider);
    } catch (signInError) {
      console.error(signInError);
    } finally {
      setAuthLoading(false);
    }
  };

  const handleSignOut = async () => {
    await signOut(auth);
  };

  const displayName = user?.displayName ?? user?.email ?? '–ì–æ—Å—Ç—å';
  const photoURL = user?.photoURL;
  const roleLabel = role === 'gm' ? '–ì–µ–π–º-–º–∞—Å—Ç–µ—Ä' : role === 'player' ? '–ò–≥—Ä–æ–∫' : '–£—á–∞—Å—Ç–Ω–∏–∫';

  return (
    <header className="hw-topbar">
      <Link to="/" className="hw-brand">
        <span className="hw-brand-icon" aria-hidden>
          <i className="fa-regular fa-gem" />
        </span>
        <span>Project Wiki</span>
      </Link>
      {user ? (
        <>
          <form className="hw-search-form" onSubmit={handleSearchSubmit}>
            <input
              type="text"
              placeholder="–ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–π –≤–∏–∫–∏..."
              className="hw-search-input"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
            />
            <button type="submit" className="hw-search-button" aria-label="–ò—Å–∫–∞—Ç—å">
              <i className="fa-solid fa-magnifying-glass" />
            </button>
          </form>
          <div className="hw-user">
            <Link to="/profile" className="hw-identity" title="–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å">
              {photoURL ? (
                <img src={photoURL} alt="–ê–≤–∞—Ç–∞—Ä" className="hw-avatar" />
              ) : (
                <span className="hw-avatar-fallback" aria-hidden="true">
                  <i className="fa-solid fa-user" />
                </span>
              )}
              <div className="hw-identity-text">
                <span className="hw-user-name">{displayName}</span>
                <span className="hw-role">{roleLabel}</span>
              </div>
            </Link>
            <button className="hw-logout" type="button" onClick={handleSignOut}>
              <i className="fa-solid fa-arrow-right-from-bracket" aria-hidden />
              <span>–í—ã–π—Ç–∏</span>
            </button>
          </div>
        </>
      ) : (
        <>
          <form className="hw-search-form" onSubmit={handleSearchSubmit}>
            <input
              type="text"
              placeholder="–ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–π –≤–∏–∫–∏..."
              className="hw-search-input"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
            />
            <button type="submit" className="hw-search-button" aria-label="–ò—Å–∫–∞—Ç—å">
              <i className="fa-solid fa-magnifying-glass" />
            </button>
          </form>
          <button
            className="hw-login"
            type="button"
            onClick={handleGoogleSignIn}
            disabled={authLoading}
          >
            <i className="fa-solid fa-user-astronaut" aria-hidden />
            <span>{authLoading ? '...' : '–í–æ–π—Ç–∏'}</span>
          </button>
        </>
      )}
    </header>
  );
};

export default TopBar;
