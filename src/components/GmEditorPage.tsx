import React, { useEffect, useMemo, useRef, useState } from 'react';
import { Link, useSearchParams } from 'react-router-dom';
import { createId } from '../utils/id';
import type { Article, ArticlesMap, SectionId } from '../types/lore';
import { LORE_SECTIONS, SECTION_BY_ID } from '../constants/loreSections';
import { buildDefaultArticles } from '../data/loreDefaults';

// [–£–î–ê–õ–ï–ù–û] ‚ùå import { useLoreArticles } from '../hooks/useLoreArticles';

// [–ò–ó–ú–ï–ù–ï–ù–û] ‚úÖ –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º `fetchArticles`, –∫–æ—Ç–æ—Ä—ã–π, –∫–∞–∫ —Ç—ã —Å–∫–∞–∑–∞–ª, —Ä–∞–±–æ—Ç–∞–µ—Ç
import { deleteArticle as deleteFromFirestore, saveArticle, fetchArticles } from '../api/lore'; 
import './GmEditorPage.css';

const formatDate = (value: number) =>
  new Intl.DateTimeFormat('ru-RU', { dateStyle: 'medium', timeStyle: 'short' }).format(value);

const randomAccent = () => `hsl(${Math.floor(Math.random() * 360)}, 65%, 60%)`;

const STATS_MAP = [
  { key: 'str', label: '–°–∏–ª–∞', icon: 'fa-solid fa-hand-fist' },
  { key: 'agi', label: '–õ–æ–≤–∫–æ—Å—Ç—å', icon: 'fa-solid fa-person-running' },
  { key: 'int', label: '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç', icon: 'fa-solid fa-brain' },
  { key: 'con', label: '–¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ', icon: 'fa-solid fa-heart-pulse' },
  { key: 'cha', label: '–•–∞—Ä–∏–∑–º–∞', icon: 'fa-solid fa-comment-dots' },
  { key: 'per', label: '–í–æ—Å–ø—Ä–∏—è—Ç–∏–µ', icon: 'fa-solid fa-eye' },
  { key: 'luc', label: '–£–¥–∞—á–∞', icon: 'fa-solid fa-clover' },
] as const;

type BaseStats = Record<string, number>;
const DEFAULT_STATS: BaseStats = { str: 0, agi: 0, int: 0, con: 0, cha: 0, per: 0, luc: 0 };

const RELATION_MAP = {
  '–û—Ç–ª–∏—á–Ω–æ–µ': '#00E676',
  '–•–æ—Ä–æ—à–µ–µ': '#698B69',
  '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ': '#424242',
  '–ü–ª–æ—Ö–æ–µ': '#FFA726',
  '–£–∂–∞—Å–Ω–æ–µ': '#F44336',
  '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ': '#7b6dff',
} as const;

const RELATION_OPTIONS = Object.keys(RELATION_MAP) as (keyof typeof RELATION_MAP)[];
const getRelationFromColor = (color: string): keyof typeof RELATION_MAP => {
  return (Object.entries(RELATION_MAP).find(([, c]) => c === color)?.[0] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ') as keyof typeof RELATION_MAP;
};

const GmEditorPage: React.FC = () => {
  const defaults = useMemo(() => buildDefaultArticles(), []);
  
  // [–£–î–ê–õ–ï–ù–û] ‚ùå const { articles: remoteArticles } = useLoreArticles(defaults);

  // 1. `articles` - –Ω–∞—à –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –∏—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–∞–≤–¥—ã.
  //    –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç—ã—Ö `defaults`.
  const [articles, setArticles] = useState<ArticlesMap>(defaults);
  
  const [searchParams, setSearchParams] = useSearchParams();
  const [section, setSection] = useState<SectionId>('characters');
  const [selectedId, setSelectedId] = useState<string | null>(null);
  const [search, setSearch] = useState('');
  const [isPreview, setPreview] = useState(false);
  const editorRef = useRef<HTMLDivElement>(null);
  
  const [isSaving, setIsSaving] = useState(false);
  const [isDirty, setIsDirty] = useState(false);
  
  // 2. [–ò–ó–ú–ï–ù–ï–ù–û] ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º `useState` –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è *—Å–∞–º–æ–π –ø–µ—Ä–≤–æ–π* –∑–∞–≥—Ä—É–∑–∫–∏
  const [isLoaded, setIsLoaded] = useState(false);

  // [–ò–ó–ú–ï–ù–ï–ù–û] ‚úÖ –≠–¢–û–¢ useEffect –¢–ï–ü–ï–†–¨ –ó–ê–ì–†–£–ñ–ê–ï–¢ –î–ê–ù–ù–´–ï
  // –ú—ã –¥–µ–ª–∞–µ–º *–≤ —Ç–æ—á–Ω–æ—Å—Ç–∏* —Ç–æ –∂–µ —Å–∞–º–æ–µ, —á—Ç–æ –∏ –∫–Ω–æ–ø–∫–∞ "–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –æ–±–ª–∞–∫–∞",
  // –Ω–æ —Ç–æ–ª—å–∫–æ –û–î–ò–ù –†–ê–ó –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
  useEffect(() => {
    const loadInitialData = async () => {
      try {
        console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Firebase...');
        const cloudData = await fetchArticles(); // üëà –í—ã–∑—ã–≤–∞–µ–º –†–ê–ë–û–¢–ê–Æ–©–£–Æ —Ñ—É–Ω–∫—Ü–∏—é
        setArticles(cloudData);                  // üëà –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–∞—à –≥–ª–∞–≤–Ω—ã–π —Å—Ç–µ–π—Ç
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
      } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', err);
      } finally {
        setIsLoaded(true); // üëà –ì–æ–≤–æ—Ä–∏–º, —á—Ç–æ –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
      }
    };
    
    loadInitialData();
  }, []); // üëà –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ = "run once on mount"

  // [–ò–ó–ú–ï–ù–ï–ù–û] ‚úÖ –≠—Ç–æ—Ç useEffect —Ç–µ–ø–µ—Ä—å –∂–¥–µ—Ç `isLoaded`
  useEffect(() => {
    // –ñ–¥–µ–º, –ø–æ–∫–∞ `isLoaded` —Å—Ç–∞–Ω–µ—Ç true
    if (!isLoaded) return; 

    const incomingSection = searchParams.get('section');
    const resolvedSection: SectionId = incomingSection && SECTION_BY_ID[incomingSection as SectionId]
      ? (incomingSection as SectionId)
      : 'characters';
    if (resolvedSection !== section) setSection(resolvedSection);

    const list = articles[resolvedSection] ?? [];
    const incomingArticle = searchParams.get('article');
    const resolvedArticle = incomingArticle && list.some((item) => item.id === incomingArticle)
      ? incomingArticle
      : list[0]?.id ?? null;
      
    if (resolvedArticle !== selectedId) {
      setSelectedId(resolvedArticle);
    }
  }, [searchParams, articles, section, selectedId, isLoaded]); // üëà `isLoaded` –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö

  const syncParams = (nextSection: SectionId, articleId: string | null) => {
    const next = new URLSearchParams(searchParams);
    next.set('section', nextSection);
    if (articleId) next.set('article', articleId);
    else next.delete('article');
    setSearchParams(next);
  };

  const filteredList = useMemo(() => {
    const list = articles[section] ?? [];
    if (!search.trim()) return list.slice().sort((a, b) => a.title.localeCompare(b.title, 'ru'));
    const needle = search.trim().toLowerCase();
    return list
      .filter((item) => item.title.toLowerCase().includes(needle) || item.summary.toLowerCase().includes(needle))
      .sort((a, b) => a.title.localeCompare(b.title, 'ru'));
  }, [articles, section, search]);

  const currentArticle = useMemo(() => {
    const list = articles[section] ?? [];
    return list.find((item) => item.id === selectedId) ?? null;
  }, [articles, section, selectedId]);

  useEffect(() => {
    if (editorRef.current && currentArticle && editorRef.current.innerHTML !== currentArticle.content) {
      editorRef.current.innerHTML = currentArticle.content;
    }
  }, [currentArticle?.id, currentArticle?.content]);

  const handleSelectArticle = (newId: string | null) => {
    if (newId === selectedId) return;
    if (isDirty && !window.confirm('–ï—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è?')) return;
    setSelectedId(newId);
    setIsDirty(false);
    syncParams(section, newId);
  };

  const handleChangeSection = (newSection: SectionId) => {
    if (newSection === section) return;
    if (isDirty && !window.confirm('–ï—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è?')) return;
    const firstId = (articles[newSection] ?? [])[0]?.id ?? null;
    setSection(newSection);
    setSelectedId(firstId);
    setIsDirty(false);
    syncParams(newSection, firstId);
  };

  type Patch = Partial<Article>;
  type PatchFn = (prevArticle: Article) => Partial<Article>;

  const updateCurrent = (patch: Patch | PatchFn) => {
    setArticles((prev) => {
      const list = prev[section] ?? [];
      const currentFromState = list.find((item) => item.id === selectedId);
      if (!currentFromState) return prev;
      const patchObject = typeof patch === 'function' ? patch(currentFromState) : patch;
      const nextArticle: Article = { ...currentFromState, ...patchObject };
      setIsDirty(true);
      const nextList = list.map((item) => (item.id === selectedId ? nextArticle : item));
      return { ...prev, [section]: nextList };
    });
  };

  const handleManualSave = async () => {
    if (!currentArticle || isSaving) return;
    setIsSaving(true);
    const articleToSave: Article = { ...currentArticle, updatedAt: Date.now() };
    setArticles(prev => ({
      ...prev,
      [section]: prev[section].map(a => a.id === articleToSave.id ? articleToSave : a)
    }));
    try {
      await saveArticle(section, articleToSave);
      setIsDirty(false);
      console.log('‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ:', articleToSave.title);
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', err);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç—å—é.');
    } finally {
      setIsSaving(false);
    }
  };

  const handleReloadFromCloud = async () => {
    if (isSaving) return;
    if (isDirty && !window.confirm('–ï—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±–ª–∞–∫–∞?')) return;
    try {
      // ‚úÖ –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Ç–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –¥–µ–ª–∞–µ—Ç —Ç–æ –∂–µ —Å–∞–º–æ–µ, —á—Ç–æ –∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
      const cloudData = await fetchArticles(); 
      setArticles(cloudData);
      setIsDirty(false);
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ Firebase');
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ Firebase:', err);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±–ª–∞–∫–∞.');
    }
  };

  const handleStatChange = (statKey: typeof STATS_MAP[number]['key'], numValue: number) => {
    updateCurrent((prevArticle) => ({
      baseStats: { ...(prevArticle.baseStats ?? DEFAULT_STATS), [statKey]: numValue }
    }));
  };

  const handleContentInput = () => {
    if (!editorRef.current) return;
    updateCurrent({ content: editorRef.current.innerHTML });
  };

  const exec = (command: string, value?: string) => {
    if (!editorRef.current) return;
    editorRef.current.focus();
    document.execCommand(command, false, value);
    handleContentInput();
  };

  const handleNewArticle = async () => {
    if (isDirty && !window.confirm('–ï—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è?')) return;
    const template: Article = {
      id: createId('art'),
      title: '–ù–æ–≤–∞—è —Å—Ç–∞—Ç—å—è',
      summary: '–î–æ–±–∞–≤—å—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ...',
      tags: [],
      coverColor: randomAccent(),
      icon: SECTION_BY_ID[section].icon,
      content: '<p>–ù–∞—á–Ω–∏—Ç–µ –ø–∏—Å–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø—Ä—è–º–æ –∑–¥–µ—Å—å...</p>',
      updatedAt: Date.now(),
    };
    if (section === 'races') template.baseStats = DEFAULT_STATS;
    if (section === 'characters') template.coverColor = RELATION_MAP['–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ'];
    if (section === 'creatures') {
      template.ac = '';
      template.attacks = '';
    }

    try {
      await saveArticle(section, template);
      setArticles((prev) => ({
        ...prev,
        [section]: [template, ...(prev[section] ?? [])],
      }));
      setSelectedId(template.id);
      setIsDirty(false);
      syncParams(section, template.id);
      setTimeout(() => editorRef.current?.focus(), 0);
    } catch (err) {
      console.error('create article failed', err);
    }
  };

  const removeArticle = async (id: string) => {
    if (!window.confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç—É —Å—Ç–∞—Ç—å—é?')) return;
    setArticles((prev) => {
      const nextList = (prev[section] ?? []).filter((item) => item.id !== id);
      if (selectedId === id) {
        const nextId = nextList[0]?.id ?? null;
        setSelectedId(nextId);
        setIsDirty(false);
        syncParams(section, nextId);
      }
      return { ...prev, [section]: nextList };
    });
    deleteFromFirestore(section, id).catch((err) => console.error('delete article failed', err));
  };

  const toolbar = (
    <div className="ge-toolbar">
      {/* ... (–≤–µ—Å—å JSX —Ç—É–ª–±–∞—Ä–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ... */}
      <button type="button" onClick={() => exec('bold')}><i className="fa-solid fa-bold" /></button>
      <button type="button" onClick={() => exec('italic')}><i className="fa-solid fa-italic" /></button>
      <button type="button" onClick={() => exec('underline')}><i className="fa-solid fa-underline" /></button>
      <span className="ge-divider" />
      <button type="button" onClick={() => exec('formatBlock', 'h2')}>H2</button>
      <button type="button" onClick={() => exec('formatBlock', 'h3')}>H3</button>
      <span className="ge-divider" />
      <button type="button" onClick={() => exec('insertUnorderedList')}><i className="fa-solid fa-list" /></button>
      <button type="button" onClick={() => exec('insertOrderedList')}><i className="fa-solid fa-list-ol" /></button>
      <button type="button" onClick={() => exec('formatBlock', 'blockquote')}><i className="fa-solid fa-quote-right" /></button>
      <button type="button" onClick={() => exec('formatBlock', 'pre')}><i className="fa-solid fa-code" /></button>
      <span className="ge-divider" />
      <button type="button" onClick={() => exec('justifyLeft')}><i className="fa-solid fa-align-left" /></button>
      <button type="button" onClick={() => exec('justifyCenter')}><i className="fa-solid fa-align-center" /></button>
      <button type="button" onClick={() => exec('justifyRight')}><i className="fa-solid fa-align-right" /></button>
      <span className="ge-divider" />
      <button type="button" onClick={() => exec('createLink', prompt('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É') || undefined)}><i className="fa-solid fa-link" /></button>
      <button type="button" onClick={() => exec('insertImage', prompt('URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è') || undefined)}><i className="fa-solid fa-image" /></button>
      <button type="button" onClick={() => exec('removeFormat')}><i className="fa-solid fa-eraser" /></button>
    </div>
  );

  return (
    <div className="ge-root">
      <header className="ge-header">
        {/* ... (JSX —Ö–µ–¥–µ—Ä–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ... */}
        <div>
          <p className="ge-kicker">GM Studio</p>
          <h1>–†–µ–¥–∞–∫—Ç–æ—Ä —Å—Ç–∞—Ç–µ–π</h1>
          <p className="ge-sub">–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –±–æ–≥–∞—Ç—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Ä–∞–∑–¥–µ–ª–æ–≤ –ü–µ—Ä—Å–æ–Ω–∞–∂–∏, –†–∞—Å—ã, –ú–∏—Ä—ã –∏ –°—É—â–µ—Å—Ç–≤–∞.</p>
        </div>
        <div className="ge-header-actions">
          <Link to="/gm-hub" className="ge-ghost-btn">
            <i className="fa-solid fa-arrow-left" /> –ù–∞–∑–∞–¥ –≤ Hub
          </Link>
          <button type="button" className="ge-ghost-btn" onClick={handleReloadFromCloud}>
            <i className="fa-solid fa-cloud-arrow-down" /> –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –æ–±–ª–∞–∫–∞
          </button>
          <button type="button" className="ge-primary-btn" onClick={handleNewArticle}>
            <i className="fa-solid fa-plus" /> –ù–æ–≤–∞—è —Å—Ç–∞—Ç—å—è
          </button>
        </div>
      </header>

      <div className="ge-layout">
        <aside className="ge-sidebar">
          {/* ... (JSX —Å–∞–π–¥–±–∞—Ä–∞ (—Ç–∞–±—ã –∏ –ø–æ–∏—Å–∫) –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ... */}
          <div className="ge-section-tabs">
            {LORE_SECTIONS.map((meta) => (
              <button
                key={meta.id}
                type="button"
                className={`ge-section-pill ${section === meta.id ? 'is-active' : ''}`}
                onClick={() => handleChangeSection(meta.id)}
              >
                <i className={meta.icon} />
                <span>{meta.label}</span>
              </button>
            ))}
          </div>

          <div className="ge-search">
            <i className="fa-solid fa-magnifying-glass" />
            <input value={search} onChange={(e) => setSearch(e.target.value)} placeholder="–ü–æ–∏—Å–∫ —Å—Ç–∞—Ç–µ–π" />
          </div>

          <ul className="ge-article-list">
            {/* [–ò–ó–ú–ï–ù–ï–ù–û] ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É, –ø–æ–∫–∞ `isLoaded` false */}
            {!isLoaded && <p className="ge-empty">–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–µ–π...</p>}
            
            {isLoaded && filteredList.map((item) => (
              <li key={item.id} className={item.id === selectedId ? 'is-active' : ''}>
                <button 
                  type="button" 
                  onClick={() => handleSelectArticle(item.id)}
                >
                  <span className="dot" style={{ background: item.coverColor }} />
                  <div>
                    <strong>{item.title}{isDirty && item.id === selectedId && ' *'}</strong>
                  </div>
                </button>
                <div className="ge-article-actions">
                  <button type="button" onClick={() => handleSelectArticle(item.id)} aria-label="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"><i className="fa-solid fa-pen" /></button>
                  <button type="button" onClick={() => removeArticle(item.id)} aria-label="–£–¥–∞–ª–∏—Ç—å"><i className="fa-solid fa-trash" /></button>
                </div>
              </li>
            ))}
            {isLoaded && filteredList.length === 0 && <p className="ge-empty">–ù–µ—Ç —Å—Ç–∞—Ç–µ–π. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é!</p>}
          </ul>
        </aside>

        <section className="ge-editor" aria-live="polite">
          {/* [–ò–ó–ú–ï–ù–ï–ù–û] ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É, –ø–æ–∫–∞ `isLoaded` false */}
          {!currentArticle && !isLoaded && <div className="ge-placeholder">–ó–∞–≥—Ä—É–∑–∫–∞...</div>}
          {!currentArticle && isLoaded && <div className="ge-placeholder">–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Å—Ç–∞—Ç—å—é.</div>}
          
          {currentArticle && (
            <div className="ge-editor-card">
              {/* ... (JSX meta-row, full, stats-row) ... */}
              <div className="ge-meta-row">
                <label>
                  –ó–∞–≥–æ–ª–æ–≤–æ–∫
                  <input value={currentArticle.title} onChange={(e) => updateCurrent({ title: e.target.value })} placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏" />
                </label>

                {section === 'characters' ? (
                  <label>
                    –û—Ç–Ω–æ—à–µ–Ω–∏—è
                    <select
                      value={getRelationFromColor(currentArticle.coverColor)}
                      onChange={(e) => {
                        const newRelation = e.target.value as keyof typeof RELATION_MAP;
                        const newColor = RELATION_MAP[newRelation] ?? RELATION_MAP['–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ'];
                        updateCurrent({ coverColor: newColor });
                      }}
                    >
                      {RELATION_OPTIONS.map((relation) => (
                        <option key={relation} value={relation}>
                          {relation}
                        </option>
                      ))}
                    </select>
                  </label>
                ) : (
                  <label>
                    –û–±–ª–æ–∂–∫–∞
                    <input type="color" value={currentArticle.coverColor} onChange={(e) => updateCurrent({ coverColor: e.target.value })} />
                  </label>
                )}

                <label>
                  –ò–∫–æ–Ω–∫–∞ (FA –∫–ª–∞—Å—Å)
                  <input
                    value={currentArticle.icon || ''}
                    onChange={(e) => updateCurrent({ icon: e.target.value })}
                    placeholder="fa-solid fa-feather"
                  />
                </label>
              </div>
              <label className="ge-full">
                –õ–∏–¥ / –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
                <textarea value={currentArticle.summary} onChange={(e) => updateCurrent({ summary: e.target.value })} placeholder="–ö–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞" />
              </label>
              
              {section === 'creatures' && (
                <div className="ge-meta-row">
                  <label>
                    –ö–î (–ö–ª–∞—Å—Å –î–æ—Å–ø–µ—Ö–∞)
                    <input
                      value={currentArticle.ac || ''}
                      onChange={(e) => updateCurrent({ ac: e.target.value })}
                      placeholder="–ù–∞–ø—Ä: 14"
                    />
                  </label>
                  <label>
                    –ê—Ç–∞–∫–∏
                    <input
                      value={currentArticle.attacks || ''}
                      onChange={(e) => updateCurrent({ attacks: e.target.value })}
                      placeholder="–ù–∞–ø—Ä: –£–∫—É—Å +4 (1d6+2)"
                    />
                  </label>
                </div>
              )}

              {section === 'races' && (
                <div className="ge-stats-row">
                  <p className="ge-stats-header">–ë–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</p>
                  {STATS_MAP.map((stat) => (
                    <label key={stat.key} className="ge-stat-label">
                      {stat.label}
                      <input
                        type="number"
                        value={currentArticle.baseStats?.[stat.key] ?? 0}
                        onChange={(e) => {
                          const numValue = parseInt(e.target.value, 10);
                          const finalValue = isNaN(numValue) ? 0 : numValue;
                          handleStatChange(stat.key, finalValue);
                        }}
                      />
                    </label>
                  ))}
                </div>
              )}

              <div className="ge-editor-shell">
                {toolbar}
                <div
                  className="ge-editor-area"
                  contentEditable
                  spellCheck
                  ref={editorRef}
                  onInput={handleContentInput}
                  suppressContentEditableWarning
                />
              </div>

              <div className="ge-editor-footer">
                {/* ... (JSX —Ñ—É—Ç–µ—Ä–∞ (–∫–Ω–æ–ø–∫–∏) –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ... */}
                <div style={{ display: 'flex', gap: '12px', alignItems: 'center' }}>
                  <button 
                    type="button" 
                    className="ge-primary-btn" 
                    onClick={handleManualSave}
                    disabled={!isDirty || isSaving}
                  >
                    <i className={`fa-solid ${isSaving ? 'fa-spinner fa-spin' : 'fa-save'}`} />
                    {isSaving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : (isDirty ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' : '–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ')}
                  </button>
                  <button type="button" className="ge-ghost-btn" onClick={() => setPreview((prev) => !prev)}>
                    <i className="fa-solid fa-eye" /> {isPreview ? '–°–∫—Ä—ã—Ç—å –ø—Ä–µ–≤—å—é' : '–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–≤—å—é'}
                  </button>
                </div>
                <p>
                  {isDirty 
                    ? <span style={{ color: '#FFA726' }}>–ï—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è...</span> 
                    : `–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${formatDate(currentArticle.updatedAt)}`
                  }
                </p>
              </div>
            </div>
          )}
        </section>

        <aside className="ge-preview" aria-live="polite">
          {/* ... (JSX –ø—Ä–µ–≤—å—é –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ... */}
          {!isPreview || !currentArticle ? (
            <div className="ge-preview-placeholder">
              <i className="fa-solid fa-wand-magic-sparkles" />
              <p>–í–∫–ª—é—á–∏—Ç–µ –ø—Ä–µ–≤—å—é, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏—Ç–æ–≥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è.</p>
            </div>
          ) : (
            <div className="ge-preview-card">
              <div className="ge-preview-cover" style={{ background: currentArticle.coverColor }}>
                <i className={currentArticle.icon || SECTION_BY_ID[section].icon} />
              </div>
              <h2>{currentArticle.title}</h2>
              <p className="ge-preview-summary">{currentArticle.summary}</p>
              
              {section === 'races' && currentArticle.baseStats && (
                <div className="ge-preview-stats">
                  {STATS_MAP.map(stat => (
                    <span key={stat.key} className="ge-preview-stat">
                      <i className={stat.icon} /> {stat.label}: <strong>{currentArticle.baseStats?.[stat.key] ?? 0}</strong>
                    </span>
                  ))}
                </div>
              )}
              
              {section === 'creatures' && (
                <div className="ge-preview-stats">
                  <span className="ge-preview-stat">
                    <i className="fa-solid fa-shield-halved" /> –ö–î: <strong>{currentArticle.ac || '?'}</strong>
                  </span>
                  <span className="ge-preview-stat">
                    <i className="fa-solid fa-gavel" /> –ê—Ç–∞–∫–∏: <strong>{currentArticle.attacks || '...'}</strong>
                  </span>
                </div>
              )}

              <div className="ge-preview-body" dangerouslySetInnerHTML={{ __html: currentArticle.content }} />
            </div>
          )}
        </aside>
      </div>
    </div>
  );
};

export default GmEditorPage;