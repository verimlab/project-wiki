import React, { useEffect, useMemo, useState } from 'react';
import { Link } from 'react-router-dom';
import './NotesPage.css';

type Note = {
  id: string;
  title: string;
  content: string;
  updatedAt: number;
  color: string;
};

const STORAGE_KEY = 'hw-notes';

const colorPalette = [
  '#4a4e69', // slate-purple
  '#9a8c98', // muted-rose
  '#c9ada7', // dusty-pink
  '#f2e9e4', // off-white
  '#22223b', // dark-blue
];

const generateId = () => {
  if (typeof globalThis !== 'undefined' && globalThis.crypto?.randomUUID) {
    return globalThis.crypto.randomUUID();
  }
  return `note-${Date.now()}-${Math.random().toString(16).slice(2, 8)}`;
};

const createStarterNotes = (): Note[] => [
  {
    id: generateId(),
    title: '–ö–æ–º–ø–∞—Å –∫–∞–º–ø–∞–Ω–∏–∏',
    content:
      '## –ì–ª–∞–≤–Ω–∞—è –ª–∏–Ω–∏—è\n- –ó–∞–≤—è–∑–∫–∞: –≥–æ—Ä–æ–¥ –õ–∏–º–Ω–∏—è –ø—Ä–æ—Å–∏—Ç –ø–æ–º–æ—â–∏\n- –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç: —Ä–∞—Å–∫–æ–ª–æ—Ç—ã–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –ü–µ–ª–ª–∏–Ω–∞\n- –§–∏–Ω–∞–ª: –≤—ã–±–æ—Ä –º–µ–∂–¥—É —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–µ–π –º–∏—Ä–∞ –∏ –ª–∏—á–Ω–æ–π –≤—ã–≥–æ–¥–æ–π',
    updatedAt: Date.now() - 1000 * 60 * 60 * 6,
    color: colorPalette[1],
  },
  {
    id: generateId(),
    title: '–ù–∞–±—Ä–æ—Å–∫–∏ –ª–æ—Ä–∞',
    content:
      '### –§–∞–∫—Ç—ã\n1. –õ—É–Ω–∞ –∏–∑ –º—Ä–∞–º–æ—Ä–∞, –æ—Ç—Ä–∞–∂–∞–µ—Ç –º–∞–≥–∏—é\n2. –†–µ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–≤—è–∑—ã–≤–∞–µ—Ç —Å—Ç–æ–ª–∏—Ü—ã\n3. –ü–µ—Ä–≤–∞—è –≠–ø–æ—Ö–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –í–µ–ª–∏–∫–∏–º –ü–æ–≥—Ä—É–∂–µ–Ω–∏–µ–º\n\n### –ò–¥–µ–∏\n- –î–æ–±–∞–≤–∏—Ç—å –∫–æ—á—É—é—â–∏–µ –≥–æ—Ä–æ–¥–∞-–∫–∞—Ä–∞–≤–∞–Ω—ã\n- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ¬´–ø—É—Å—Ç—ã–µ –∫–∞—Ä—Ç—ã¬ª –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π',
    updatedAt: Date.now() - 1000 * 60 * 60 * 2,
    color: colorPalette[0],
  },
  {
    id: generateId(),
    title: '–°–ø–∏—Å–æ–∫ –¥–µ–ª –º–∞—Å—Ç–µ—Ä–∞',
    content:
      '- [ ] –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É NPC –¥–ª—è –†–∏—ç–ª—å\n- [ ] –ü—Ä–∏–¥—É–º–∞—Ç—å –∑–∞–≥–∞–¥–∫—É –¥–ª—è –¥—Ä–µ–≤–Ω–µ–≥–æ –∑–∞–ª–∞\n- [x] –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –≤–∏–∑—É —Å—Ü–µ–Ω—ã –Ω–∞ —Ä—ã–Ω–∫–µ\n\n**–ù–∞–≥—Ä–∞–¥—ã –Ω–µ–¥–µ–ª–∏**\n1. –ú–∞–≥–∏—á–µ—Å–∫–∏–π –∫–æ–º–ø–∞—Å (—Ä–µ–¥–∫–∏–π)\n2. –¢–∏—Ç—É–ª ¬´–•—Ä–∞–Ω–∏—Ç–µ–ª—å –ø—Ä–∏—Å—Ç–∞–Ω–∏¬ª',
    updatedAt: Date.now() - 1000 * 60 * 10,
    color: colorPalette[3],
  },
];

const loadNotes = (): Note[] => {
  if (typeof window === 'undefined') {
    return createStarterNotes();
  }

  try {
    const persisted = window.localStorage.getItem(STORAGE_KEY);
    if (!persisted) {
      return createStarterNotes();
    }
    const parsed = JSON.parse(persisted);
    if (!Array.isArray(parsed)) {
      return createStarterNotes();
    }

    return parsed
      .map((note) => ({
        id: typeof note.id === 'string' ? note.id : generateId(),
        title: typeof note.title === 'string' ? note.title : '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
        content: typeof note.content === 'string' ? note.content : '',
        updatedAt: typeof note.updatedAt === 'number' ? note.updatedAt : Date.now(),
        color: colorPalette.includes(note.color) ? note.color : colorPalette[0],
      }))
      .sort((a, b) => b.updatedAt - a.updatedAt);
  } catch {
    return createStarterNotes();
  }
};

const formatDate = (value: number) => {
  try {
    return new Intl.DateTimeFormat('ru-RU', {
      dateStyle: 'short',
      timeStyle: 'short',
    }).format(value);
  } catch {
    return new Date(value).toLocaleString();
  }
};

const templateSnippets = [
  {
    id: 'session',
    title: '–ö–æ–Ω—Å–ø–µ–∫—Ç —Å–µ—Å—Å–∏–∏',
    body: '## –ö–æ–Ω—Å–ø–µ–∫—Ç —Å–µ—Å—Å–∏–∏\n**–î–∞—Ç–∞:** \n**–ò–≥—Ä–æ–∫–∏:** \n\n### –ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ\n- \n- \n\n### –í–∞–∂–Ω—ã–µ NPC\n- \n\n### –ö—Ä—é—á–∫–∏\n1. \n2. ',
  },
  {
    id: 'npc',
    title: '–®–∞–±–ª–æ–Ω NPC',
    body: '### NPC\n**–ò–º—è:** \n**–†–æ–ª—å:** \n**–ß–µ—Ä—Ç—ã:** \n- \n- \n\n**–°–µ–∫—Ä–µ—Ç:** \n**–ì–æ–ª–æ—Å:** ',
  },
  {
    id: 'brainstorm',
    title: '–ë—Ä–µ–π–Ω—à—Ç–æ—Ä–º',
    body: '## –ò–¥–µ–∏\n- üî• \n- üåä \n- üåå \n\n### –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏\n1. \n2. \n3. ',
  },
];

const NotesPage: React.FC = () => {
  const [notes, setNotes] = useState<Note[]>(() => loadNotes());
  const [selectedId, setSelectedId] = useState<string | null>(null);
  const [search, setSearch] = useState('');

  useEffect(() => {
    if (selectedId || notes.length === 0) {
      return;
    }
    setSelectedId(notes[0].id);
  }, [notes, selectedId]);

  useEffect(() => {
    if (typeof window === 'undefined') {
      return;
    }
    window.localStorage.setItem(STORAGE_KEY, JSON.stringify(notes));
  }, [notes]);

  const filteredNotes = useMemo(() => {
    const query = search.trim().toLowerCase();
    if (!query) {
      return notes;
    }
    return notes.filter(
      (note) =>
        note.title.toLowerCase().includes(query) ||
        note.content.toLowerCase().includes(query),
    );
  }, [notes, search]);

  const selectedNote = notes.find((note) => note.id === selectedId) ?? null;

  const handleCreateNote = () => {
    const timestamp = Date.now();
    const newNote: Note = {
      id: generateId(),
      title: '–ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞',
      content: '–ù–∞—á–Ω–∏—Ç–µ –ø–∏—Å–∞—Ç—å... ‚úçÔ∏è',
      updatedAt: timestamp,
      color: colorPalette[(notes.length + 1) % colorPalette.length],
    };
    setNotes((prev) => [newNote, ...prev]);
    setSelectedId(newNote.id);
  };

  const handleDeleteNote = (id: string) => {
    setNotes((prev) => prev.filter((note) => note.id !== id));
    setSelectedId((current) => {
      if (current !== id) {
        return current;
      }
      const remaining = notes.filter((note) => note.id !== id);
      return remaining[0]?.id ?? null;
    });
  };

  const handleUpdateNote = (id: string, patch: Partial<Omit<Note, 'id'>>) => {
    setNotes((prev) => {
      const updated = prev.map((note) =>
        note.id === id
          ? {
              ...note,
              ...patch,
              updatedAt: Date.now(),
            }
          : note,
      );
      return [...updated].sort((a, b) => b.updatedAt - a.updatedAt);
    });
  };

  const handleInsertTemplate = (body: string) => {
    if (!selectedNote) {
      const timestamp = Date.now();
      const newNote: Note = {
        id: generateId(),
        title: '–ë—ã—Å—Ç—Ä–∞—è –∑–∞–º–µ—Ç–∫–∞',
        content: body,
        updatedAt: timestamp,
        color: colorPalette[0],
      };
      setNotes((prev) => [newNote, ...prev]);
      setSelectedId(newNote.id);
      return;
    }
    handleUpdateNote(selectedNote.id, {
      content: `${selectedNote.content}\n\n${body}`.trim(),
    });
  };

  return (
    <div className="notes-page">
      <header className="notes-header">
        <div className="notes-header-left">
          <Link className="notes-back" to="/">
            <i className="fa-solid fa-arrow-left" aria-hidden />
            <span>–ù–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é</span>
          </Link>
          <div>
            <p className="notes-kicker">–í–∞—à –ª–∏—á–Ω—ã–π –±–ª–æ–∫–Ω–æ—Ç</p>
            <h1>–ó–∞–º–µ—Ç–∫–∏</h1>
          </div>
        </div>
        <div className="notes-header-actions">
          <div className="notes-search">
            <i className="fa-solid fa-magnifying-glass" aria-hidden />
            <input
              type="search"
              placeholder="–ü–æ–∏—Å–∫ –ø–æ –∑–∞–º–µ—Ç–∫–∞–º..."
              value={search}
              onChange={(event) => setSearch(event.target.value)}
            />
          </div>
          <button className="notes-primary" type="button" onClick={handleCreateNote}>
            <i className="fa-solid fa-plus" aria-hidden />
            <span>–ù–æ–≤–∞—è</span>
          </button>
        </div>
      </header>

      <div className="notes-workspace">
        <aside className="notes-sidebar" aria-label="–°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫">
          {filteredNotes.length === 0 ? (
            <div className="notes-empty">
              <p>–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</p>
              <button type="button" onClick={handleCreateNote}>
                –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å
              </button>
            </div>
          ) : (
            <ul>
              {filteredNotes.map((note) => (
                <li key={note.id}>
                  <button
                    type="button"
                    className={`notes-list-item${note.id === selectedId ? ' is-active' : ''}`}
                    onClick={() => setSelectedId(note.id)}
                    style={{ borderLeftColor: note.color }}
                  >
                    <div className="notes-list-heading">
                      <strong>{note.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</strong>
                      <time dateTime={new Date(note.updatedAt).toISOString()}>
                        {formatDate(note.updatedAt)}
                      </time>
                    </div>
                    <p>{note.content.slice(0, 120)}</p>
                  </button>
                  <div className="notes-list-actions">
                    <button
                      type="button"
                      aria-label="–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"
                      onClick={() => handleDeleteNote(note.id)}
                    >
                      <i className="fa-solid fa-trash" aria-hidden />
                    </button>
                  </div>
                </li>
              ))}
            </ul>
          )}
        </aside>

        <section className="notes-editor" aria-live="polite">
          {selectedNote ? (
            <>
              <div className="notes-editor-meta" style={{ background: selectedNote.color }}>
                <div>
                  <span>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ</span>
                  <strong>{formatDate(selectedNote.updatedAt)}</strong>
                </div>
                <div className="notes-color-picker">
                  {colorPalette.map((color) => (
                    <button
                      key={color}
                      type="button"
                      className={color === selectedNote.color ? 'is-selected' : undefined}
                      style={{ backgroundColor: color }}
                      aria-label={`–ü—Ä–∏—Å–≤–æ–∏—Ç—å —Ü–≤–µ—Ç ${color}`}
                      onClick={() => handleUpdateNote(selectedNote.id, { color })}
                    />
                  ))}
                </div>
              </div>
              <div className="notes-editor-fields">
                <input
                  className="notes-title"
                  type="text"
                  value={selectedNote.title}
                  onChange={(event) => handleUpdateNote(selectedNote.id, { title: event.target.value })}
                  placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏"
                />
                <textarea
                  className="notes-content"
                  value={selectedNote.content}
                  onChange={(event) => handleUpdateNote(selectedNote.id, { content: event.target.value })}
                  placeholder="–ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ –º—ã—Å–ª–∏, –ø–ª–∞–Ω—ã –∏ –ª–æ—Ä..."
                />
              </div>
              <div className="notes-templates" aria-label="–®–∞–±–ª–æ–Ω—ã">
                <p>–ë—ã—Å—Ç—Ä—ã–µ –≤—Å—Ç–∞–≤–∫–∏:</p>
                <div className="notes-template-grid">
                  {templateSnippets.map((snippet) => (
                    <button
                      type="button"
                      key={snippet.id}
                      onClick={() => handleInsertTemplate(snippet.body)}
                    >
                      <i className="fa-regular fa-note-sticky" aria-hidden />
                      <span>{snippet.title}</span>
                    </button>
                  ))}
                </div>
              </div>
            </>
          ) : (
            <div className="notes-placeholder">
              <i className="fa-regular fa-note-sticky" aria-hidden />
              <p>–°–æ–∑–¥–∞–π—Ç–µ –∑–∞–º–µ—Ç–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.</p>
              <button type="button" onClick={handleCreateNote}>
                –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É
              </button>
            </div>
          )}
        </section>
      </div>
    </div>
  );
};

export default NotesPage;
